


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Lab2, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         ;CR  EQU 0x0D
    5 00000000         
    6 00000000 E3A00000 
                       Start   MOV              r0,#0       ;Point the register
                                                            s to the memory loc
                                                            ations
    7 00000004 E3A01000        MOV              r1,#0       ;Make sure these ar
                                                            e initially zero'd 
                                                            out
    8 00000008 E3A02000        MOV              r2,#0
    9 0000000C E3A03000        MOV              r3,#0       ;Use this as loop c
                                                            ounter and str leng
                                                            th
   10 00000010 E59F4088        LDR              r4,=Data    ;Point r4 to the da
                                                            ta
   11 00000014 E3A05000        MOV              r5,#0       ;Holds the current 
                                                            position of char to
                                                             be compared
   12 00000018 E3A06000        MOV              r6,#0       ;Hold the length of
                                                             the string
   13 0000001C E3A07000        MOV              r7,#0       ;Use as temp regist
                                                            er?
   14 00000020         
   15 00000020         
   16 00000020         Loop                                 ;While not last cha
                                                            r, get another byte
                                                            
   17 00000020 E7D41003        LDRB             r1,[r4,r3]  ;Read n-th byte
   18 00000024 E3510000        CMP              r1,#0       ;Compare to the str
                                                            ing terminator
   19 00000028 0A000001        BEQ              Loop_End    ;If == to CR, stop
   20 0000002C E2833001        ADD              r3,r3,#1    ;If =/= to CR, incr
                                                            ement count
   21 00000030 EAFFFFFA        BAL              Loop        ;Loop again
   22 00000034         
   23 00000034         Loop_End
   24 00000034 E5936000        LDR              r6,[r3]     ;Store length of st
                                                            ring in r6 (value o
                                                            f r3, not address,
   25 00000038         ;specified with the []
   26 00000038 E2433001        SUB              r3,r3,#1
   27 0000003C         
   28 0000003C E3560000        CMP              r6,#0       ;Compare str length
                                                             to 0
   29 00000040 0A000012        BEQ              Zero_Case   ;Break if length of
                                                             string = 0
   30 00000044 E3560001        CMP              r6,#1       ;Compare str length
                                                             to 1
   31 00000048 0A000012        BEQ              One_Case    ;Break if length of
                                                             string = 1
   32 0000004C EAFFFFFF        B                Div_Two
   33 00000050         
   34 00000050         
   35 00000050         Div_Two                              ;Finds half the len
                                                            gth of the string, 
                                                            so we know how many



ARM Macro Assembler    Page 2 


                                                             times to check byt
                                                            es
   36 00000050 E3530000        CMP              r3,#0
   37 00000054 0A000002        BEQ              Load_Half   ;If r3 == 0, then l
                                                            ength of array is 0
                                                            , break to Zero_Cas
                                                            e
   38 00000058 E2433002        SUB              r3,r3,#2    ;Else, subtract 2 f
                                                            rom value of r3
   39 0000005C E2877001        ADD              r7,r7,#1    ;Increment counter
   40 00000060 EAFFFFFA        BAL              Div_Two
   41 00000064         
   42 00000064         
   43 00000064         Load_Half
   44 00000064 E5973000        LDR              r3,[r7]     ;Load the value of 
                                                            r7 into r3, which i
                                                            s half the length o
                                                            f the array
   45 00000068         ;In other words, we now know how many times to loop thro
                       ugh and compare
   46 00000068         ;bytes of string
   47 00000068 EAFFFFFF        B                Cmp_Bytes
   48 0000006C         
   49 0000006C         
   50 0000006C         Cmp_Bytes
   51 0000006C E1530005        CMP              r3,r5
   52 00000070 0A000008        BEQ              One_Case    ;If r3 and r5 hold 
                                                            the same value, the
                                                            n we've gone throug
                                                            h the entire list, 
                                                            and
   53 00000074         ;everything matches, send to One_Case
   54 00000074 E7D41005        LDRB             r1,[r4,r5]  ;Point r1 at the fi
                                                            rst byte of string
   55 00000078 E7D42006        LDRB             r2,[r4,r6]  ;Point r2 at the la
                                                            st byte of the stri
                                                            ng
   56 0000007C E1510002        CMP              r1,r2
   57 00000080 1A000002        BNE              Zero_Case   ;If not equivalent,
                                                             exit and set r0 to
                                                             0
   58 00000084 E2466001        SUB              r6,r6,#1    ;Subtract one (beca
                                                            use we already chec
                                                            ked the last bit)
   59 00000088 E2855001        ADD              r5,r5,#1    ;Add one (because w
                                                            e already checked f
                                                            irst bit)
   60 0000008C EAFFFFF6        BAL              Cmp_Bytes   ;Keep looping
   61 00000090         
   62 00000090         
   63 00000090         Zero_Case                            ;Set r0 to 0, meani
                                                            ng string was not a
                                                             palindrome
   64 00000090 E3A00000        MOV              r0,#0
   65 00000094 EA000001        B                Done
   66 00000098         
   67 00000098         One_Case                             ;Set r0 to 1, meani
                                                            ng string was a pal
                                                            indrome



ARM Macro Assembler    Page 3 


   68 00000098 E3A00001        MOV              r0,#1
   69 0000009C EAFFFFFF        B                Done
   70 000000A0         
   71 000000A0         Done
   72 000000A0         
   73 000000A0         
   74 000000A0         
   75 000000A0 00000000        AREA             Data, DATA, READWRITE
   76 00000000 4D 4F 4D 
              00       Str     DCB              "MOM",0     ;Assign labels for 
                                                            each memory locatio
                                                            n
   77 00000004         
   78 00000004                 END                          ;Done
Command Line: --debug --xref --bi --apcs=interwork --depend=.\part2.d -o.\part2
.o -I"C:\Program Files (x86)\Kiel\ARM\RV31\INC" -I"C:\Program Files (x86)\Kiel\
ARM\CMSIS\Include" --predefine="__EVAL SETA 1" --list=.\part2.lst part2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Cmp_Bytes 0000006C

Symbol: Cmp_Bytes
   Definitions
      At line 50 in file part2.s
   Uses
      At line 47 in file part2.s
      At line 60 in file part2.s

Div_Two 00000050

Symbol: Div_Two
   Definitions
      At line 35 in file part2.s
   Uses
      At line 32 in file part2.s
      At line 40 in file part2.s

Done 000000A0

Symbol: Done
   Definitions
      At line 71 in file part2.s
   Uses
      At line 65 in file part2.s
      At line 69 in file part2.s

Lab2 00000000

Symbol: Lab2
   Definitions
      At line 1 in file part2.s
   Uses
      None
Comment: Lab2 unused
Load_Half 00000064

Symbol: Load_Half
   Definitions
      At line 43 in file part2.s
   Uses
      At line 37 in file part2.s
Comment: Load_Half used once
Loop 00000020

Symbol: Loop
   Definitions
      At line 16 in file part2.s
   Uses
      At line 21 in file part2.s
Comment: Loop used once
Loop_End 00000034

Symbol: Loop_End
   Definitions
      At line 23 in file part2.s
   Uses
      At line 19 in file part2.s
Comment: Loop_End used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

One_Case 00000098

Symbol: One_Case
   Definitions
      At line 67 in file part2.s
   Uses
      At line 31 in file part2.s
      At line 52 in file part2.s

Start 00000000

Symbol: Start
   Definitions
      At line 6 in file part2.s
   Uses
      None
Comment: Start unused
Zero_Case 00000090

Symbol: Zero_Case
   Definitions
      At line 63 in file part2.s
   Uses
      At line 29 in file part2.s
      At line 57 in file part2.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 75 in file part2.s
   Uses
      At line 10 in file part2.s
Comment: Data used once
Str 00000000

Symbol: Str
   Definitions
      At line 76 in file part2.s
   Uses
      None
Comment: Str unused
2 symbols
345 symbols in table
